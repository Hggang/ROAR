{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"architecture/","text":"ROAR Carla Overall Architecture Environment Maps Environmental Perception Motion Planning Vehicle Controller","title":"Architecture"},{"location":"architecture/#roar-carla-overall-architecture","text":"","title":"ROAR Carla Overall Architecture"},{"location":"architecture/#environment-maps","text":"","title":"Environment Maps"},{"location":"architecture/#environmental-perception","text":"","title":"Environmental Perception"},{"location":"architecture/#motion-planning","text":"","title":"Motion Planning"},{"location":"architecture/#vehicle-controller","text":"","title":"Vehicle Controller"},{"location":"introduction/","text":"Welcome to ROAR Documentation for ROAR-Simulator Quick Links If you are new to the project visit Quick Start If you are curious about ROAR Competition at Berkeley visit Berkeley ROAR If you are curious about Carla visit Carla Simulator For more information regarding DeCal Course visit Roar Decal . Contribute To ROAR Guide Communication Before starting a new contribution, it is important to let the community know what you plan on doing. This serves several purposes. It lets everyone know that you are going to start work on a feature or bug fix so that no one else does the same and duplicates your effort. It lets anyone who may already be working on the feature or bug fix know you intend to work on it, so they can tell you and you don't duplicate their effort. It gives others a chance to provide more information about what the feature or bug fix might need or how it may need to be implemented. You can let the community know by first opening an Issue on Github. An admin will tag a related Pull Request if this is a duplicated issue Documentation Style We use mkdocs and mkdocstrings to automatically generate documentation. This means that we require all Python code documentation to be written in Google Style The recommended method for enabling automatic Google Docstring framework generation is through PyCharm. Here's a tutorial on how to enable this feature in PyCharm Pull Request Style We ask that you fill out the pull request template as indicated in Github, to provide as much details as possible. Issue Style We ask that you fill out the correct issue template as indicated on Github.","title":"Introduction"},{"location":"introduction/#welcome-to-roar","text":"","title":"Welcome to ROAR"},{"location":"introduction/#documentation-for-roar-simulator","text":"","title":"Documentation for ROAR-Simulator"},{"location":"introduction/#quick-links","text":"If you are new to the project visit Quick Start If you are curious about ROAR Competition at Berkeley visit Berkeley ROAR If you are curious about Carla visit Carla Simulator For more information regarding DeCal Course visit Roar Decal .","title":"Quick Links"},{"location":"introduction/#contribute-to-roar-guide","text":"","title":"Contribute To ROAR Guide"},{"location":"introduction/#communication","text":"Before starting a new contribution, it is important to let the community know what you plan on doing. This serves several purposes. It lets everyone know that you are going to start work on a feature or bug fix so that no one else does the same and duplicates your effort. It lets anyone who may already be working on the feature or bug fix know you intend to work on it, so they can tell you and you don't duplicate their effort. It gives others a chance to provide more information about what the feature or bug fix might need or how it may need to be implemented. You can let the community know by first opening an Issue on Github. An admin will tag a related Pull Request if this is a duplicated issue","title":"Communication"},{"location":"introduction/#documentation-style","text":"We use mkdocs and mkdocstrings to automatically generate documentation. This means that we require all Python code documentation to be written in Google Style The recommended method for enabling automatic Google Docstring framework generation is through PyCharm. Here's a tutorial on how to enable this feature in PyCharm","title":"Documentation Style"},{"location":"introduction/#pull-request-style","text":"We ask that you fill out the pull request template as indicated in Github, to provide as much details as possible.","title":"Pull Request Style"},{"location":"introduction/#issue-style","text":"We ask that you fill out the correct issue template as indicated on Github.","title":"Issue Style"},{"location":"quickstart/","text":"Note: for Mac users, please dual boot as Windows 10. Fork the Repo Please click the Fork button on the upper right corner and submit a pull request to master branch. For a more in-depth tutorial on recommended setup video clone the repo git clone --recursive https://github.com/YOURUSERNAME/ROAR.git Create virtual environment with python3.7 conda create -n ROAR python=3.7 conda activate ROAR Install Dependency General Dependency pip install -r requirements.txt in the ROAR folder For simulator cd ROAR_Sim pip install -r requirements.txt Download Simulator distribution for your OS GDrive Link For actual vehicle wired to your computer cd ROAR_Jetson pip install -r requirements.txt For actual vehicle running on Jetson Nano cd ROAR_Jetson sudo apt-get install python-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev libfreetype6-dev pip3 install -r requirements_jetson_nano.txt Enjoy For Simulator python runner_sim.py For physical car python runner_jetson.py or python3 runner_jetson.py","title":"Quick Start"}]}